version: '3.9'

services:
  angular-client:
    build:
      context: ./src/ClientApp
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    depends_on:
      - api-gateway
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://api-gateway:5000/api
    networks:
      - microservices-network
    restart: unless-stopped

  api-gateway:
    build:
      context: ./src/ApiGateway
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - DOTNET_RUNNING_IN_CONTAINER=true
    networks:
      - microservices-network
    restart: unless-stopped

  user-service:
    build:
      context: ./src/Microservices/UserService
      dockerfile: Dockerfile
    ports:
      - "5100:5100"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5100
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=UserServiceDB;User=sa;Password=Hitesh12@;TrustServerCertificate=true;
    depends_on:
      - sqlserver
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5100/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  product-service:
    build:
      context: ./src/Microservices/ProductService
      dockerfile: Dockerfile
    ports:
      - "5200:5200"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5200
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=ProductServiceDB;User=sa;Password=Hitesh12@;TrustServerCertificate=true;
    depends_on:
      - sqlserver
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5200/health || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Hitesh12@
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - mssql_data:/var/opt/mssql
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'Hitesh12@' -Q 'SELECT 1' -C"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

volumes:
  mssql_data:
    driver: local
  redis_data:
    driver: local

networks:
  microservices-network:
    driver: bridge
